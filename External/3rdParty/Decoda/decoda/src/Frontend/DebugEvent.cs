/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Decoda {

public class DebugEvent : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DebugEvent(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DebugEvent obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~DebugEvent() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          DecodaPINVOKE.delete_DebugEvent(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public DebugEvent(EventId eventId, uint vm) : this(DecodaPINVOKE.new_DebugEvent((int)eventId, vm), true) {
  }

  public DebugEvent Clone() {
    global::System.IntPtr cPtr = DecodaPINVOKE.DebugEvent_Clone(swigCPtr);
    DebugEvent ret = (cPtr == global::System.IntPtr.Zero) ? null : new DebugEvent(cPtr, false);
    return ret;
  }

  public EventId GetEventId() {
    EventId ret = (EventId)DecodaPINVOKE.DebugEvent_GetEventId(swigCPtr);
    return ret;
  }

  public uint GetVm() {
    uint ret = DecodaPINVOKE.DebugEvent_GetVm(swigCPtr);
    return ret;
  }

  public uint GetScriptIndex() {
    uint ret = DecodaPINVOKE.DebugEvent_GetScriptIndex(swigCPtr);
    return ret;
  }

  public void SetScriptIndex(uint scriptIndex) {
    DecodaPINVOKE.DebugEvent_SetScriptIndex(swigCPtr, scriptIndex);
  }

  public uint GetLine() {
    uint ret = DecodaPINVOKE.DebugEvent_GetLine(swigCPtr);
    return ret;
  }

  public void SetLine(uint scriptIndex) {
    DecodaPINVOKE.DebugEvent_SetLine(swigCPtr, scriptIndex);
  }

  public bool GetEnabled() {
    bool ret = DecodaPINVOKE.DebugEvent_GetEnabled(swigCPtr);
    return ret;
  }

  public void SetEnabled(bool enabled) {
    DecodaPINVOKE.DebugEvent_SetEnabled(swigCPtr, enabled);
  }

  public string GetMessageStr() {
    string ret = DecodaPINVOKE.DebugEvent_GetMessageStr(swigCPtr);
    return ret;
  }

  public void SetMessage(string message) {
    DecodaPINVOKE.DebugEvent_SetMessage(swigCPtr, message);
    if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
  }

  public MessageType GetMessageType() {
    MessageType ret = (MessageType)DecodaPINVOKE.DebugEvent_GetMessageType(swigCPtr);
    return ret;
  }

  public void SetMessageType(MessageType messageType) {
    DecodaPINVOKE.DebugEvent_SetMessageType(swigCPtr, (int)messageType);
  }

}

}
