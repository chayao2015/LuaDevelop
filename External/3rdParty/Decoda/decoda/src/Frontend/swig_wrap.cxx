/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_Decoda(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_Decoda(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_Decoda(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that C# proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>
#include <exception>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException : public std::exception {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char *msg) : swig_msg(msg) {
    }

    DirectorException(const std::string &msg) : swig_msg(msg) {
    }

    virtual ~DirectorException() throw() {
    }

    const char *what() const throw() {
      return swig_msg.c_str();
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public DirectorException {
  public:
    DirectorPureVirtualException(const char *msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}


#include "DebugEvent.h"
#include "DebugFrontend.h"


#include <string>



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "swig_wrap.h"

SwigDirector_IEvtHandler::SwigDirector_IEvtHandler() : IEvtHandler(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_IEvtHandler::~SwigDirector_IEvtHandler() {
  
}


void SwigDirector_IEvtHandler::AddPendingEvent(DebugEvent const &e) {
  void * je = 0 ;
  
  if (!swig_callbackAddPendingEvent) {
    throw Swig::DirectorPureVirtualException("IEvtHandler::AddPendingEvent");
  } else {
    je = (DebugEvent *) &e; 
    swig_callbackAddPendingEvent(je);
  }
}

void SwigDirector_IEvtHandler::swig_connect_director(SWIG_Callback0_t callbackAddPendingEvent) {
  swig_callbackAddPendingEvent = callbackAddPendingEvent;
}

void SwigDirector_IEvtHandler::swig_init_callbacks() {
  swig_callbackAddPendingEvent = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_DebugEvent(int jarg1, unsigned int jarg2) {
  void * jresult ;
  EventId arg1 ;
  unsigned int arg2 ;
  DebugEvent *result = 0 ;
  
  arg1 = (EventId)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (DebugEvent *)new DebugEvent(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DebugEvent_Clone(void * jarg1) {
  void * jresult ;
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  DebugEvent *result = 0 ;
  
  arg1 = (DebugEvent *)jarg1; 
  result = (DebugEvent *)(arg1)->Clone();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugEvent_GetEventId(void * jarg1) {
  int jresult ;
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  EventId result;
  
  arg1 = (DebugEvent *)jarg1; 
  result = (EventId)((DebugEvent const *)arg1)->GetEventId();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugEvent_GetVm(void * jarg1) {
  unsigned int jresult ;
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  unsigned int result;
  
  arg1 = (DebugEvent *)jarg1; 
  result = (unsigned int)((DebugEvent const *)arg1)->GetVm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugEvent_GetScriptIndex(void * jarg1) {
  unsigned int jresult ;
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  unsigned int result;
  
  arg1 = (DebugEvent *)jarg1; 
  result = (unsigned int)((DebugEvent const *)arg1)->GetScriptIndex();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugEvent_SetScriptIndex(void * jarg1, unsigned int jarg2) {
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (DebugEvent *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetScriptIndex(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugEvent_GetLine(void * jarg1) {
  unsigned int jresult ;
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  unsigned int result;
  
  arg1 = (DebugEvent *)jarg1; 
  result = (unsigned int)((DebugEvent const *)arg1)->GetLine();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugEvent_SetLine(void * jarg1, unsigned int jarg2) {
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (DebugEvent *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->SetLine(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugEvent_GetEnabled(void * jarg1) {
  unsigned int jresult ;
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  bool result;
  
  arg1 = (DebugEvent *)jarg1; 
  result = (bool)((DebugEvent const *)arg1)->GetEnabled();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugEvent_SetEnabled(void * jarg1, unsigned int jarg2) {
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  bool arg2 ;
  
  arg1 = (DebugEvent *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->SetEnabled(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DebugEvent_GetMessageStr(void * jarg1) {
  char * jresult ;
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (DebugEvent *)jarg1; 
  result = (std::string *) &((DebugEvent const *)arg1)->GetMessageStr();
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugEvent_SetMessage(void * jarg1, char * jarg2) {
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (DebugEvent *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->SetMessage((std::string const &)*arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugEvent_GetMessageType(void * jarg1) {
  int jresult ;
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  MessageType result;
  
  arg1 = (DebugEvent *)jarg1; 
  result = (MessageType)((DebugEvent const *)arg1)->GetMessageType();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugEvent_SetMessageType(void * jarg1, int jarg2) {
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  MessageType arg2 ;
  
  arg1 = (DebugEvent *)jarg1; 
  arg2 = (MessageType)jarg2; 
  (arg1)->SetMessageType(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DebugEvent(void * jarg1) {
  DebugEvent *arg1 = (DebugEvent *) 0 ;
  
  arg1 = (DebugEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_IEvtHandler(void * jarg1) {
  IEvtHandler *arg1 = (IEvtHandler *) 0 ;
  
  arg1 = (IEvtHandler *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IEvtHandler_AddPendingEvent(void * jarg1, void * jarg2) {
  IEvtHandler *arg1 = (IEvtHandler *) 0 ;
  DebugEvent *arg2 = 0 ;
  
  arg1 = (IEvtHandler *)jarg1; 
  arg2 = (DebugEvent *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "DebugEvent const & type is null", 0);
    return ;
  } 
  (arg1)->AddPendingEvent((DebugEvent const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_IEvtHandler() {
  void * jresult ;
  IEvtHandler *result = 0 ;
  
  result = (IEvtHandler *)new SwigDirector_IEvtHandler();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_IEvtHandler_director_connect(void *objarg, SwigDirector_IEvtHandler::SWIG_Callback0_t callback0) {
  IEvtHandler *obj = (IEvtHandler *)objarg;
  SwigDirector_IEvtHandler *director = dynamic_cast<SwigDirector_IEvtHandler *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_Script_name_set(void * jarg1, char * jarg2) {
  DebugFrontend::Script *arg1 = (DebugFrontend::Script *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (DebugFrontend::Script *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DebugFrontend_Script_name_get(void * jarg1) {
  char * jresult ;
  DebugFrontend::Script *arg1 = (DebugFrontend::Script *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (DebugFrontend::Script *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_Script_source_set(void * jarg1, char * jarg2) {
  DebugFrontend::Script *arg1 = (DebugFrontend::Script *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (DebugFrontend::Script *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->source = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DebugFrontend_Script_source_get(void * jarg1) {
  char * jresult ;
  DebugFrontend::Script *arg1 = (DebugFrontend::Script *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (DebugFrontend::Script *)jarg1; 
  result = (std::string *) & ((arg1)->source);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_Script_state_set(void * jarg1, int jarg2) {
  DebugFrontend::Script *arg1 = (DebugFrontend::Script *) 0 ;
  CodeState arg2 ;
  
  arg1 = (DebugFrontend::Script *)jarg1; 
  arg2 = (CodeState)jarg2; 
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugFrontend_Script_state_get(void * jarg1) {
  int jresult ;
  DebugFrontend::Script *arg1 = (DebugFrontend::Script *) 0 ;
  CodeState result;
  
  arg1 = (DebugFrontend::Script *)jarg1; 
  result = (CodeState) ((arg1)->state);
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_Script_lineMapper_set(void * jarg1, void * jarg2) {
  DebugFrontend::Script *arg1 = (DebugFrontend::Script *) 0 ;
  LineMapper arg2 ;
  LineMapper *argp2 ;
  
  arg1 = (DebugFrontend::Script *)jarg1; 
  argp2 = (LineMapper *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null LineMapper", 0);
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->lineMapper = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DebugFrontend_Script_lineMapper_get(void * jarg1) {
  void * jresult ;
  DebugFrontend::Script *arg1 = (DebugFrontend::Script *) 0 ;
  LineMapper result;
  
  arg1 = (DebugFrontend::Script *)jarg1; 
  result =  ((arg1)->lineMapper);
  jresult = new LineMapper((const LineMapper &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DebugFrontend_Script() {
  void * jresult ;
  DebugFrontend::Script *result = 0 ;
  
  result = (DebugFrontend::Script *)new DebugFrontend::Script();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DebugFrontend_Script(void * jarg1) {
  DebugFrontend::Script *arg1 = (DebugFrontend::Script *) 0 ;
  
  arg1 = (DebugFrontend::Script *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_StackFrame_scriptIndex_set(void * jarg1, unsigned int jarg2) {
  DebugFrontend::StackFrame *arg1 = (DebugFrontend::StackFrame *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (DebugFrontend::StackFrame *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->scriptIndex = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugFrontend_StackFrame_scriptIndex_get(void * jarg1) {
  unsigned int jresult ;
  DebugFrontend::StackFrame *arg1 = (DebugFrontend::StackFrame *) 0 ;
  unsigned int result;
  
  arg1 = (DebugFrontend::StackFrame *)jarg1; 
  result = (unsigned int) ((arg1)->scriptIndex);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_StackFrame_line_set(void * jarg1, unsigned int jarg2) {
  DebugFrontend::StackFrame *arg1 = (DebugFrontend::StackFrame *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (DebugFrontend::StackFrame *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->line = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugFrontend_StackFrame_line_get(void * jarg1) {
  unsigned int jresult ;
  DebugFrontend::StackFrame *arg1 = (DebugFrontend::StackFrame *) 0 ;
  unsigned int result;
  
  arg1 = (DebugFrontend::StackFrame *)jarg1; 
  result = (unsigned int) ((arg1)->line);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_StackFrame_function_set(void * jarg1, char * jarg2) {
  DebugFrontend::StackFrame *arg1 = (DebugFrontend::StackFrame *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (DebugFrontend::StackFrame *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->function = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DebugFrontend_StackFrame_function_get(void * jarg1) {
  char * jresult ;
  DebugFrontend::StackFrame *arg1 = (DebugFrontend::StackFrame *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (DebugFrontend::StackFrame *)jarg1; 
  result = (std::string *) & ((arg1)->function);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DebugFrontend_StackFrame() {
  void * jresult ;
  DebugFrontend::StackFrame *result = 0 ;
  
  result = (DebugFrontend::StackFrame *)new DebugFrontend::StackFrame();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DebugFrontend_StackFrame(void * jarg1) {
  DebugFrontend::StackFrame *arg1 = (DebugFrontend::StackFrame *) 0 ;
  
  arg1 = (DebugFrontend::StackFrame *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_Process_id_set(void * jarg1, unsigned int jarg2) {
  DebugFrontend::Process *arg1 = (DebugFrontend::Process *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (DebugFrontend::Process *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugFrontend_Process_id_get(void * jarg1) {
  unsigned int jresult ;
  DebugFrontend::Process *arg1 = (DebugFrontend::Process *) 0 ;
  unsigned int result;
  
  arg1 = (DebugFrontend::Process *)jarg1; 
  result = (unsigned int) ((arg1)->id);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_Process_name_set(void * jarg1, char * jarg2) {
  DebugFrontend::Process *arg1 = (DebugFrontend::Process *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (DebugFrontend::Process *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->name = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DebugFrontend_Process_name_get(void * jarg1) {
  char * jresult ;
  DebugFrontend::Process *arg1 = (DebugFrontend::Process *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (DebugFrontend::Process *)jarg1; 
  result = (std::string *) & ((arg1)->name);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_Process_title_set(void * jarg1, char * jarg2) {
  DebugFrontend::Process *arg1 = (DebugFrontend::Process *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (DebugFrontend::Process *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  if (arg1) (arg1)->title = *arg2;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DebugFrontend_Process_title_get(void * jarg1) {
  char * jresult ;
  DebugFrontend::Process *arg1 = (DebugFrontend::Process *) 0 ;
  std::string *result = 0 ;
  
  arg1 = (DebugFrontend::Process *)jarg1; 
  result = (std::string *) & ((arg1)->title);
  jresult = SWIG_csharp_string_callback(result->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DebugFrontend_Process() {
  void * jresult ;
  DebugFrontend::Process *result = 0 ;
  
  result = (DebugFrontend::Process *)new DebugFrontend::Process();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DebugFrontend_Process(void * jarg1) {
  DebugFrontend::Process *arg1 = (DebugFrontend::Process *) 0 ;
  
  arg1 = (DebugFrontend::Process *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DebugFrontend_Get() {
  void * jresult ;
  DebugFrontend *result = 0 ;
  
  result = (DebugFrontend *) &DebugFrontend::Get();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_Destroy() {
  DebugFrontend::Destroy();
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_SetEventHandler(void * jarg1, void * jarg2) {
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  IEvtHandler *arg2 = (IEvtHandler *) 0 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (IEvtHandler *)jarg2; 
  (arg1)->SetEventHandler(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugFrontend_Start(void * jarg1, char * jarg2, char * jarg3, char * jarg4, char * jarg5, unsigned int jarg6, unsigned int jarg7) {
  unsigned int jresult ;
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool arg6 ;
  bool arg7 ;
  bool result;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  arg6 = jarg6 ? true : false; 
  arg7 = jarg7 ? true : false; 
  result = (bool)(arg1)->Start((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,arg6,arg7);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_Shutdown(void * jarg1) {
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  (arg1)->Shutdown();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugFrontend_Attach(void * jarg1, unsigned int jarg2, char * jarg3) {
  unsigned int jresult ;
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->Attach(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugFrontend_AttachDebuggerToHost(void * jarg1) {
  unsigned int jresult ;
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  bool result;
  
  arg1 = (DebugFrontend *)jarg1; 
  result = (bool)(arg1)->AttachDebuggerToHost();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_Stop(void * jarg1, unsigned int jarg2) {
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  bool arg2 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->Stop(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_Continue(void * jarg1, unsigned int jarg2) {
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->Continue(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_Break(void * jarg1, unsigned int jarg2) {
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->Break(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_StepOver(void * jarg1, unsigned int jarg2) {
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->StepOver(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_StepInto(void * jarg1, unsigned int jarg2) {
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->StepInto(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_DoneLoadingScript(void * jarg1, unsigned int jarg2) {
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->DoneLoadingScript(arg2);
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DebugFrontend_Evaluate(void * jarg1, unsigned int jarg2, char * jarg3, unsigned int jarg4) {
  char * jresult ;
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  std::string result;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (arg1)->Evaluate(arg2,(char const *)arg3,arg4);
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_ToggleBreakpoint(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4) {
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  (arg1)->ToggleBreakpoint(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_RemoveAllBreakPoints(void * jarg1, unsigned int jarg2) {
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  unsigned int arg2 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  (arg1)->RemoveAllBreakPoints(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DebugFrontend_GetScript(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  unsigned int arg2 ;
  DebugFrontend::Script *result = 0 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (DebugFrontend::Script *)(arg1)->GetScript(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugFrontend_GetScriptIndex(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int result;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (unsigned int)((DebugFrontend const *)arg1)->GetScriptIndex((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DebugFrontend_GetNumStackFrames(void * jarg1) {
  unsigned int jresult ;
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  unsigned int result;
  
  arg1 = (DebugFrontend *)jarg1; 
  result = (unsigned int)((DebugFrontend const *)arg1)->GetNumStackFrames();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DebugFrontend_GetStackFrame(void * jarg1, unsigned int jarg2) {
  void * jresult ;
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  unsigned int arg2 ;
  DebugFrontend::StackFrame *result = 0 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (DebugFrontend::StackFrame *) &((DebugFrontend const *)arg1)->GetStackFrame(arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DebugFrontend_GetState(void * jarg1) {
  int jresult ;
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  DebugFrontend::State result;
  
  arg1 = (DebugFrontend *)jarg1; 
  result = (DebugFrontend::State)((DebugFrontend const *)arg1)->GetState();
  jresult = (int)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_GetProcesses(void * jarg1, void * jarg2) {
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  std::vector< DebugFrontend::Process > *arg2 = 0 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  arg2 = (std::vector< DebugFrontend::Process > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< DebugFrontend::Process > & type is null", 0);
    return ;
  } 
  ((DebugFrontend const *)arg1)->GetProcesses(*arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_DebugFrontend_IgnoreException(void * jarg1, char * jarg2) {
  DebugFrontend *arg1 = (DebugFrontend *) 0 ;
  std::string *arg2 = 0 ;
  
  arg1 = (DebugFrontend *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return ;
  }
  std::string arg2_str(jarg2);
  arg2 = &arg2_str; 
  (arg1)->IgnoreException((std::string const &)*arg2);
}


#ifdef __cplusplus
}
#endif

