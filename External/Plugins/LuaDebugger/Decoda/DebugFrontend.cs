/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace Decoda {

public class DebugFrontend : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DebugFrontend(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(DebugFrontend obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public class Script : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Script(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Script obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Script() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            DecodaPINVOKE.delete_DebugFrontend_Script(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public string name {
      set {
        DecodaPINVOKE.DebugFrontend_Script_name_set(swigCPtr, value);
        if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = DecodaPINVOKE.DebugFrontend_Script_name_get(swigCPtr);
        if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public string source {
      set {
        DecodaPINVOKE.DebugFrontend_Script_source_set(swigCPtr, value);
        if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = DecodaPINVOKE.DebugFrontend_Script_source_get(swigCPtr);
        if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public CodeState state {
      set {
        DecodaPINVOKE.DebugFrontend_Script_state_set(swigCPtr, (int)value);
      } 
      get {
        CodeState ret = (CodeState)DecodaPINVOKE.DebugFrontend_Script_state_get(swigCPtr);
        return ret;
      } 
    }
  
    public SWIGTYPE_p_LineMapper lineMapper {
      set {
        DecodaPINVOKE.DebugFrontend_Script_lineMapper_set(swigCPtr, SWIGTYPE_p_LineMapper.getCPtr(value));
        if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        SWIGTYPE_p_LineMapper ret = new SWIGTYPE_p_LineMapper(DecodaPINVOKE.DebugFrontend_Script_lineMapper_get(swigCPtr), true);
        if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Script() : this(DecodaPINVOKE.new_DebugFrontend_Script(), true) {
    }
  
  }

  public class StackFrame : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal StackFrame(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(StackFrame obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~StackFrame() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            DecodaPINVOKE.delete_DebugFrontend_StackFrame(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public uint scriptIndex {
      set {
        DecodaPINVOKE.DebugFrontend_StackFrame_scriptIndex_set(swigCPtr, value);
      } 
      get {
        uint ret = DecodaPINVOKE.DebugFrontend_StackFrame_scriptIndex_get(swigCPtr);
        return ret;
      } 
    }
  
    public uint line {
      set {
        DecodaPINVOKE.DebugFrontend_StackFrame_line_set(swigCPtr, value);
      } 
      get {
        uint ret = DecodaPINVOKE.DebugFrontend_StackFrame_line_get(swigCPtr);
        return ret;
      } 
    }
  
    public string function {
      set {
        DecodaPINVOKE.DebugFrontend_StackFrame_function_set(swigCPtr, value);
        if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = DecodaPINVOKE.DebugFrontend_StackFrame_function_get(swigCPtr);
        if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public StackFrame() : this(DecodaPINVOKE.new_DebugFrontend_StackFrame(), true) {
    }
  
  }

  public class Process : global::System.IDisposable {
    private global::System.Runtime.InteropServices.HandleRef swigCPtr;
    protected bool swigCMemOwn;
  
    internal Process(global::System.IntPtr cPtr, bool cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
    }
  
    internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Process obj) {
      return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
    }
  
    ~Process() {
      Dispose();
    }
  
    public virtual void Dispose() {
      lock(this) {
        if (swigCPtr.Handle != global::System.IntPtr.Zero) {
          if (swigCMemOwn) {
            swigCMemOwn = false;
            DecodaPINVOKE.delete_DebugFrontend_Process(swigCPtr);
          }
          swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
        }
        global::System.GC.SuppressFinalize(this);
      }
    }
  
    public uint id {
      set {
        DecodaPINVOKE.DebugFrontend_Process_id_set(swigCPtr, value);
      } 
      get {
        uint ret = DecodaPINVOKE.DebugFrontend_Process_id_get(swigCPtr);
        return ret;
      } 
    }
  
    public string name {
      set {
        DecodaPINVOKE.DebugFrontend_Process_name_set(swigCPtr, value);
        if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = DecodaPINVOKE.DebugFrontend_Process_name_get(swigCPtr);
        if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public string title {
      set {
        DecodaPINVOKE.DebugFrontend_Process_title_set(swigCPtr, value);
        if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
      } 
      get {
        string ret = DecodaPINVOKE.DebugFrontend_Process_title_get(swigCPtr);
        if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
        return ret;
      } 
    }
  
    public Process() : this(DecodaPINVOKE.new_DebugFrontend_Process(), true) {
    }
  
  }

  public static DebugFrontend Get() {
    DebugFrontend ret = new DebugFrontend(DecodaPINVOKE.DebugFrontend_Get(), false);
    return ret;
  }

  public static void Destroy() {
    DecodaPINVOKE.DebugFrontend_Destroy();
  }

  public void SetEventHandler(IEvtHandler eventHandler) {
    DecodaPINVOKE.DebugFrontend_SetEventHandler(swigCPtr, IEvtHandler.getCPtr(eventHandler));
  }

  public bool Start(string command, string commandArguments, string currentDirectory, string symbolsDirectory, bool debug, bool startBroken) {
    bool ret = DecodaPINVOKE.DebugFrontend_Start(swigCPtr, command, commandArguments, currentDirectory, symbolsDirectory, debug, startBroken);
    return ret;
  }

  public void Shutdown() {
    DecodaPINVOKE.DebugFrontend_Shutdown(swigCPtr);
  }

  public bool Attach(uint processId, string symbolsDirectory) {
    bool ret = DecodaPINVOKE.DebugFrontend_Attach(swigCPtr, processId, symbolsDirectory);
    return ret;
  }

  public bool AttachDebuggerToHost() {
    bool ret = DecodaPINVOKE.DebugFrontend_AttachDebuggerToHost(swigCPtr);
    return ret;
  }

  public void Stop(bool kill) {
    DecodaPINVOKE.DebugFrontend_Stop(swigCPtr, kill);
  }

  public void Continue(uint vm) {
    DecodaPINVOKE.DebugFrontend_Continue(swigCPtr, vm);
  }

  public void Break(uint vm) {
    DecodaPINVOKE.DebugFrontend_Break(swigCPtr, vm);
  }

  public void StepOver(uint vm) {
    DecodaPINVOKE.DebugFrontend_StepOver(swigCPtr, vm);
  }

  public void StepInto(uint vm) {
    DecodaPINVOKE.DebugFrontend_StepInto(swigCPtr, vm);
  }

  public void DoneLoadingScript(uint vm) {
    DecodaPINVOKE.DebugFrontend_DoneLoadingScript(swigCPtr, vm);
  }

  public string Evaluate(uint vm, string expression, uint stackLevel) {
    string ret = DecodaPINVOKE.DebugFrontend_Evaluate(swigCPtr, vm, expression, stackLevel);
    return ret;
  }

  public void ToggleBreakpoint(uint vm, uint scriptIndex, uint line) {
    DecodaPINVOKE.DebugFrontend_ToggleBreakpoint(swigCPtr, vm, scriptIndex, line);
  }

  public void RemoveAllBreakPoints(uint vm) {
    DecodaPINVOKE.DebugFrontend_RemoveAllBreakPoints(swigCPtr, vm);
  }

  public DebugFrontend.Script GetScript(uint scriptIndex) {
    global::System.IntPtr cPtr = DecodaPINVOKE.DebugFrontend_GetScript(swigCPtr, scriptIndex);
    DebugFrontend.Script ret = (cPtr == global::System.IntPtr.Zero) ? null : new DebugFrontend.Script(cPtr, false);
    return ret;
  }

  public uint GetScriptIndex(string name) {
    uint ret = DecodaPINVOKE.DebugFrontend_GetScriptIndex(swigCPtr, name);
    return ret;
  }

  public uint GetNumStackFrames() {
    uint ret = DecodaPINVOKE.DebugFrontend_GetNumStackFrames(swigCPtr);
    return ret;
  }

  public DebugFrontend.StackFrame GetStackFrame(uint i) {
    DebugFrontend.StackFrame ret = new DebugFrontend.StackFrame(DecodaPINVOKE.DebugFrontend_GetStackFrame(swigCPtr, i), false);
    return ret;
  }

  public DebugFrontend.State GetState() {
    DebugFrontend.State ret = (DebugFrontend.State)DecodaPINVOKE.DebugFrontend_GetState(swigCPtr);
    return ret;
  }

  public void GetProcesses(SWIGTYPE_p_std__vectorT_DebugFrontend__Process_t processes) {
    DecodaPINVOKE.DebugFrontend_GetProcesses(swigCPtr, SWIGTYPE_p_std__vectorT_DebugFrontend__Process_t.getCPtr(processes));
    if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
  }

  public void IgnoreException(string message) {
    DecodaPINVOKE.DebugFrontend_IgnoreException(swigCPtr, message);
    if (DecodaPINVOKE.SWIGPendingException.Pending) throw DecodaPINVOKE.SWIGPendingException.Retrieve();
  }

  public enum State {
    State_Inactive,
    State_Running,
    State_Broken
  }

}

}
